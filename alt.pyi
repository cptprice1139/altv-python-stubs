from typing import List, Dict, overload
from typing_extensions import Protocol

class Vector3:
    def __init__(self, x: int, y: int, z: int):
        self.x = x
        self.y = y
        self.z = z

    def toDict(self) -> Dict[int]: ...
    def toList(self) -> List[int]: ...
    def length(self) -> float: ...
    def distance(self) -> float: ...

    def toDegrees(self, vec: Vector3) -> Vector3: ...
    def toRadians(self, vec: Vector3) -> Vector3: ...
    def isInRange(self, vec: Vector3) -> bool: ...
    
    @overload
    def add(self, vec: Vector3) -> Vector3: ...
    @overload
    def add(self, num: int) -> Vector3: ...
    @overload
    def add(self, num1: int, num2: int, num3: int) -> Vector3: ...
    @overload
    def add(self, list: List[int]) -> Vector3: ...

    @overload
    def cross(self, vec: Vector3) -> Vector3: ...
    @overload
    def cross(self, num: int) -> Vector3: ...
    @overload
    def cross(self, num1: int, num2: int, num3: int) -> Vector3: ...
    @overload
    def cross(self, list: List[int]) -> Vector3: ...

    @overload
    def div(self, vec: Vector3) -> Vector3: ...
    @overload
    def div(self, num: int) -> Vector3: ...
    @overload
    def div(self, num1: int, num2: int, num3: int) -> Vector3: ...
    @overload
    def div(self, list: List[int]) -> Vector3: ...

    @overload
    def dot(self, vec: Vector3) -> Vector3: ...
    @overload
    def dot(self, num: int) -> Vector3: ...
    @overload
    def dot(self, num1: int, num2: int, num3: int) -> Vector3: ...
    @overload
    def dot(self, list: List[int]) -> Vector3: ...

    @overload
    def sub(self, vec: Vector3) -> Vector3: ...
    @overload
    def sub(self, num: int) -> Vector3: ...
    @overload
    def sub(self, num1: int, num2: int, num3: int) -> Vector3: ...
    @overload
    def sub(self, list: List[int]) -> Vector3: ...

    @overload
    def mul(self, vec: Vector3) -> Vector3: ...
    @overload
    def mul(self, num: int) -> Vector3: ...
    @overload
    def mul(self, num1: int, num2: int, num3: int) -> Vector3: ...
    @overload
    def mul(self, list: List[int]) -> Vector3: ...

    def negative(self) -> Vector3: ...
    def normalize(self) -> Vector3: ...
    def angleTo(self, vector: Vector3) -> float: ...
    def angleToDegrees(self, vector: Vector3) -> float: ...


def log(value: str) -> None: ...
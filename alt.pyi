from typing import List, Dict, overload
from typing_extensions import Protocol


class Vector3:
    def __init__(self, x: int, y: int, z: int):
        self.x = x
        self.y = y
        self.z = z

    def toDict(self) -> Dict[int]: ...
    def toList(self) -> List[int]: ...
    def length(self) -> float: ...
    def distance(self) -> float: ...

    def toDegrees(self, vec: Vector3) -> Vector3: ...
    def toRadians(self, vec: Vector3) -> Vector3: ...
    def isInRange(self, vec: Vector3) -> bool: ...

    @overload
    def add(self, vec: Vector3) -> Vector3: ...
    @overload
    def add(self, num: int) -> Vector3: ...
    @overload
    def add(self, num1: int, num2: int, num3: int) -> Vector3: ...
    @overload
    def add(self, list: List[int]) -> Vector3: ...

    @overload
    def cross(self, vec: Vector3) -> Vector3: ...
    @overload
    def cross(self, num: int) -> Vector3: ...
    @overload
    def cross(self, num1: int, num2: int, num3: int) -> Vector3: ...
    @overload
    def cross(self, list: List[int]) -> Vector3: ...

    @overload
    def div(self, vec: Vector3) -> Vector3: ...
    @overload
    def div(self, num: int) -> Vector3: ...
    @overload
    def div(self, num1: int, num2: int, num3: int) -> Vector3: ...
    @overload
    def div(self, list: List[int]) -> Vector3: ...

    @overload
    def dot(self, vec: Vector3) -> Vector3: ...
    @overload
    def dot(self, num: int) -> Vector3: ...
    @overload
    def dot(self, num1: int, num2: int, num3: int) -> Vector3: ...
    @overload
    def dot(self, list: List[int]) -> Vector3: ...

    @overload
    def sub(self, vec: Vector3) -> Vector3: ...
    @overload
    def sub(self, num: int) -> Vector3: ...
    @overload
    def sub(self, num1: int, num2: int, num3: int) -> Vector3: ...
    @overload
    def sub(self, list: List[int]) -> Vector3: ...

    @overload
    def mul(self, vec: Vector3) -> Vector3: ...
    @overload
    def mul(self, num: int) -> Vector3: ...
    @overload
    def mul(self, num1: int, num2: int, num3: int) -> Vector3: ...
    @overload
    def mul(self, list: List[int]) -> Vector3: ...

    def negative(self) -> Vector3: ...
    def normalize(self) -> Vector3: ...
    def angleTo(self, vector: Vector3) -> float: ...
    def angleToDegrees(self, vector: Vector3) -> float: ...


class BaseObjectType:
    Player: Any
    Vehicle: Any
    VoiceChannel: Any
    
class WorldObject(BaseObjectType):
    def pos() -> Vector3: ...
    def dimension() -> int: ...

class Entity(WorldObject):
    def all() -> List[Entity]: ...
    def id() -> int: ...
    def getById(id: int) -> Entity | None: ...
    def model() -> int: ...
    def netOwner() -> Player | None: ...
    def setNetOwner(player: Player, disableMigration: bool=None) -> None: ...
    def resetNetOwner(disableMigration: bool=None) -> None: ...
    @overload
    def rot() -> Vector3: ...
    @overload
    def rot(rot: Vector3) -> None: ...
    @overload
    def visible() -> bool: ...
    @overload
    def visible(visible: bool) -> None: ...
    def deleteStreamSyncedMeta(key: str) -> None: ...
    def getStreamSyncedMeta(key: str) -> Any: ...
    def setStreamSyncedMeta(key: str, value: Any) -> None: ...
    def hasStreamSyncedMeta(key: str) -> bool: ...
    def deleteSyncedMeta(key: str) -> None: ...
    def getSyncedMeta(key: str) -> Any: ...
    def setSyncedMeta(key: str, value: Any) -> None: ...
    def hasSyncedMeta(key: str) -> bool: ...

class Player(Entity):
    def all() -> List[Player]: ...
    @overload
    def spawn(x: int, y: int, z: int, delay: int) -> None: ...
    @overload
    def spawn(position: Vector3, delay: int) -> None: ...
    @overload
    def health() -> int: ...
    @overload
    def health(value: int) -> None: ...
    def dead() -> bool: ...
    @overload
    def armour() -> int: ...       
    @overload
    def armour(value: int) -> None: ...
    @overload
    def maxArmour() -> int: ...       
    @overload
    def maxArmour(value: int) -> None: ...
    def speed() -> float: ...
    @overload
    def model() -> int: ...
    @overload
    def model(value: Any) -> None: ...
    def clearBloodDamage() -> None: ...
    def headRot() -> Vector3: ...
    def name() -> str: ...
    def authToken() -> str: ...
    def hwidHash() -> int: ...
    def hwidExHash() -> int: ...
    def ip() -> str: ...
    def socialId() -> int: ...
    def connected() -> bool: ...
    def ping() -> int: ...
    def kick(reason: str) -> None: ...
    @overload
    def currentWeapon() -> int: ...
    @overload
    def currentWeapon(hash: int) -> None: ...
    def currentWeaponComponents() -> List[int]: ...
    def currentWeaponTintIndex() -> int: ...
    @overload
    def giveWeapon(weaponHash: int, ammoCount: int, equipNow: bool) -> None: ...
    @overload
    def giveWeapon(weaponName: str, ammoCount: int, equipNow: bool) -> None: ...
    @overload
    def removeWeapon(weaponHash: int) -> None: ...
    @overload
    def removeWeapon(weaponName: str) -> None: ...
    @overload
    def getWeaponTintIndex(weaponHash: int) -> None: ...
    @overload
    def getWeaponTintIndex(weaponName: str) -> None: ...
    def removeAllWeapons() -> None: ...
    def flashlightActive() -> bool: ...
    @overload
    def hasWeaponComponent(weapon: int, component: int) -> bool: ...
    @overload
    def hasWeaponComponent(weapon: str, component: int) -> bool: ...
    @overload
    def hasWeaponComponent(weapon: int, component: str) -> bool: ...
    @overload
    def hasWeaponComponent(weapon: str, component: str) -> bool: ...
    @overload
    def addWeaponComponent(weapon: int, component: int) -> bool: ...
    @overload
    def addWeaponComponent(weapon: str, component: int) -> bool: ...
    @overload
    def addWeaponComponent(weapon: int, component: str) -> bool: ...
    @overload
    def addWeaponComponent(weapon: str, component: str) -> bool: ...
    @overload
    def setWeaponTintIndex(weapon: int, tintIndex: int) -> None: ...
    @overload
    def setWeaponTintIndex(weapon: str, tintIndex: int) -> None: ...
    def jumping() -> bool: ...
    def inRagdoll() -> bool: ...
    def aiming() -> bool: ...
    def shooting() -> bool: ...
    def reloading() -> bool: ...
    def entityAimingOffset() -> Vector3: ...
    def entityAimingAt() -> Entity | None: ...
    def aimPos() -> Vector3: ...
    def setDateTime(second: int, minute: int, hour: int, day: int, month: int, year: int) -> None: ...
    def setWeather(weather: int) -> None: ...
    def vehicle() -> Vehicle | None: ...
    def inVehicle() -> bool: ...
    def seat() -> int: ...

class Vehicle(Entity): ...

def log(value: str) -> None: ...
